// Function to find the length of Longest Common Subsequence (LCS)
fn longest_common_subsequence_length(s1: &str, s2: &str) -> usize {
    let m = s1.len();
    let n = s2.len();

    // Create a 2D DP table to store lengths of LCS
    let mut dp = vec![vec![0; n + 1]; m + 1];

    // Build the DP table
    for i in 1..=m {
        for j in 1..=n {
            if s1.chars().nth(i - 1) == s2.chars().nth(j - 1) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                dp[i][j] = dp[i - 1][j].max(dp[i][j - 1]);
            }
        }
    }

    // Length of LCS is found at dp[m][n]
    dp[m][n]
}

// Function to find the longest common subsequence
fn longest_common_subsequence(s1: &str, s2: &str) -> String {
    let m = s1.len();
    let n = s2.len();

    // Create a 2D DP table to store lengths of LCS
    let mut dp = vec![vec![0; n + 1]; m + 1];

    // Build the DP table
    for i in 1..=m {
        for j in 1..=n {
            if s1.chars().nth(i - 1) == s2.chars().nth(j - 1) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                dp[i][j] = dp[i - 1][j].max(dp[i][j - 1]);
            }
        }
    }

    // Trace back to find the LCS string
    let mut lcs_length = dp[m][n];
    let mut lcs = String::with_capacity(lcs_length);

    let mut i = m;
    let mut j = n;

    while i > 0 && j > 0 {
        if s1.chars().nth(i - 1) == s2.chars().nth(j - 1) {
            lcs.insert(0, s1.chars().nth(i - 1).unwrap());
            i -= 1;
            j -= 1;
        } else if dp[i - 1][j] > dp[i][j - 1] {
            i -= 1;
        } else {
            j -= 1;
        }
    }

    lcs
}

fn main() {
    let s1 = "abcdef";
    let s2 = "acbcf";

    // Calculate the length of LCS
    let length_of_lcs = longest_common_subsequence_length(s1, s2);
    println!("Length of Longest Common Subsequence: {}", length_of_lcs);

    // Find the LCS itself
    let lcs = longest_common_subsequence(s1, s2);
    println!("Longest Common Subsequence: {}", lcs);
}
